package graphql

// Code generated by graphql-codegen-golang ; DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
)

type Client struct {
	*http.Client
	Url string
}

// NewClient creates a GraphQL client ready to use.
func NewClient(url string) *Client {
	return &Client{
		Client: &http.Client{},
		Url:    url,
	}
}

type GraphQLOperation struct {
	Query         string          `json:"query"`
	OperationName string          `json:"operationName,omitempty"`
	Variables     json.RawMessage `json:"variables,omitempty"`
}

type GraphQLResponse struct {
	Data   json.RawMessage `json:"data,omitempty"`
	Errors []GraphQLError  `json:"errors,omitempty"`
}

type GraphQLError map[string]interface{}

func (err GraphQLError) Error() string {
	return fmt.Sprintf("graphql: %v", map[string]interface{}(err))
}

func (resp *GraphQLResponse) Error() string {
	if len(resp.Errors) == 0 {
		return ""
	}
	errs := strings.Builder{}
	for _, err := range resp.Errors {
		errs.WriteString(err.Error())
		errs.WriteString("\n")
	}
	return errs.String()
}

func execute(client *http.Client, req *http.Request) (*GraphQLResponse, error) {
	if client == nil {
		client = http.DefaultClient
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	body, err := ioutil.ReadAll(resp.Body)
	resp.Body.Close()
	if err != nil {
		return nil, err
	}
	return unmarshalGraphQLReponse(body)
}

func unmarshalGraphQLReponse(b []byte) (*GraphQLResponse, error) {
	resp := GraphQLResponse{}
	if err := json.Unmarshal(b, &resp); err != nil {
		return nil, err
	}
	if len(resp.Errors) > 0 {
		return &resp, &resp
	}
	return &resp, nil
}

type UserFragment struct {
	ID string `json:"id"`
}

//
// query GetCloudProviders($order_by: [CloudProviders_order_by!])
//

type GetCloudProvidersVariables struct {
	OrderBy *[]CloudProvidersOrderBy `json:"order_by,omitempty"`
}

type GetCloudProvidersResponse struct {
	CloudProviders []struct {
		ID string `json:"id"`
	} `json:"CloudProviders"`
}

type GetCloudProvidersRequest struct {
	*http.Request
}

func NewGetCloudProvidersRequest(url string, vars *GetCloudProvidersVariables) (*GetCloudProvidersRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `query GetCloudProviders($order_by: [CloudProviders_order_by!]) {
  CloudProviders(limit: 1, order_by: $order_by) {
    id
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &GetCloudProvidersRequest{req}, nil
}

func (req *GetCloudProvidersRequest) Execute(client *http.Client) (*GetCloudProvidersResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result GetCloudProvidersResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func GetCloudProviders(url string, client *http.Client, vars *GetCloudProvidersVariables) (*GetCloudProvidersResponse, error) {
	req, err := NewGetCloudProvidersRequest(url, vars)
	if err != nil {
		return nil, err
	}
	return req.Execute(client)
}

func (client *Client) GetCloudProviders(vars *GetCloudProvidersVariables) (*GetCloudProvidersResponse, error) {
	return GetCloudProviders(client.Url, client.Client, vars)
}

//
// query GetUsers($limit: Int = 1)
//

type GetUsersVariables struct {
	Limit *Int `json:"limit,omitempty"`
}

type GetUsersResponse struct {
	Users []struct {
		UserFragment
	} `json:"Users"`
}

type GetUsersRequest struct {
	*http.Request
}

func NewGetUsersRequest(url string, vars *GetUsersVariables) (*GetUsersRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `query GetUsers($limit: Int = 1) {
  Users(limit: $limit) {
    ...UserFragment
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &GetUsersRequest{req}, nil
}

func (req *GetUsersRequest) Execute(client *http.Client) (*GetUsersResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result GetUsersResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func GetUsers(url string, client *http.Client, vars *GetUsersVariables) (*GetUsersResponse, error) {
	req, err := NewGetUsersRequest(url, vars)
	if err != nil {
		return nil, err
	}
	return req.Execute(client)
}

func (client *Client) GetUsers(vars *GetUsersVariables) (*GetUsersResponse, error) {
	return GetUsers(client.Url, client.Client, vars)
}

//
// Scalars
//

type Int int32
type Float float64
type Boolean bool
type String string
type ID string
type TestFormat string
type Name string
type UUID string

//
// Enums
//

type CloudProvidersSelectColumn string

const (
	CloudProvidersSelectColumnID   CloudProvidersSelectColumn = "id"
	CloudProvidersSelectColumnName CloudProvidersSelectColumn = "name"
)

type UsersSelectColumn string

const (
	UsersSelectColumnID UsersSelectColumn = "id"
)

type OrderBy string

const (
	OrderByAsc            OrderBy = "asc"
	OrderByAscNullsFirst  OrderBy = "asc_nulls_first"
	OrderByAscNullsLast   OrderBy = "asc_nulls_last"
	OrderByDesc           OrderBy = "desc"
	OrderByDescNullsFirst OrderBy = "desc_nulls_first"
	OrderByDescNullsLast  OrderBy = "desc_nulls_last"
)

//
// Inputs
//

type CloudProvidersBoolExp struct {
	And  *[]CloudProvidersBoolExp `json:"_and,omitempty"`
	Not  *CloudProvidersBoolExp   `json:"_not,omitempty"`
	Or   *[]CloudProvidersBoolExp `json:"_or,omitempty"`
	ID   *UuidComparisonExp       `json:"id,omitempty"`
	Name *NameComparisonExp       `json:"name,omitempty"`
}

type CloudProvidersOrderBy struct {
	ID   *OrderBy `json:"id,omitempty"`
	Name *OrderBy `json:"name,omitempty"`
}

type CloudProvidersPkColumnsInput struct {
	ID UUID `json:"id"`
}

type StringComparisonExp struct {
	Eq       *String   `json:"_eq,omitempty"`
	Gt       *String   `json:"_gt,omitempty"`
	Gte      *String   `json:"_gte,omitempty"`
	Ilike    *String   `json:"_ilike,omitempty"`
	In       *[]String `json:"_in,omitempty"`
	IsNull   *Boolean  `json:"_is_null,omitempty"`
	Like     *String   `json:"_like,omitempty"`
	Lt       *String   `json:"_lt,omitempty"`
	Lte      *String   `json:"_lte,omitempty"`
	Neq      *String   `json:"_neq,omitempty"`
	Nilike   *String   `json:"_nilike,omitempty"`
	Nin      *[]String `json:"_nin,omitempty"`
	Nlike    *String   `json:"_nlike,omitempty"`
	Nsimilar *String   `json:"_nsimilar,omitempty"`
	Similar  *String   `json:"_similar,omitempty"`
}

type UsersBoolExp struct {
	And *[]UsersBoolExp      `json:"_and,omitempty"`
	Not *UsersBoolExp        `json:"_not,omitempty"`
	Or  *[]UsersBoolExp      `json:"_or,omitempty"`
	ID  *StringComparisonExp `json:"id,omitempty"`
}

type UsersOrderBy struct {
	ID *OrderBy `json:"id,omitempty"`
}

type UsersPkColumnsInput struct {
	ID String `json:"id"`
}

type NameComparisonExp struct {
	Eq     *Name    `json:"_eq,omitempty"`
	Gt     *Name    `json:"_gt,omitempty"`
	Gte    *Name    `json:"_gte,omitempty"`
	In     *[]Name  `json:"_in,omitempty"`
	IsNull *Boolean `json:"_is_null,omitempty"`
	Lt     *Name    `json:"_lt,omitempty"`
	Lte    *Name    `json:"_lte,omitempty"`
	Neq    *Name    `json:"_neq,omitempty"`
	Nin    *[]Name  `json:"_nin,omitempty"`
}

type UuidComparisonExp struct {
	Eq     *UUID    `json:"_eq,omitempty"`
	Gt     *UUID    `json:"_gt,omitempty"`
	Gte    *UUID    `json:"_gte,omitempty"`
	In     *[]UUID  `json:"_in,omitempty"`
	IsNull *Boolean `json:"_is_null,omitempty"`
	Lt     *UUID    `json:"_lt,omitempty"`
	Lte    *UUID    `json:"_lte,omitempty"`
	Neq    *UUID    `json:"_neq,omitempty"`
	Nin    *[]UUID  `json:"_nin,omitempty"`
}

//
// Objects
//

type CloudProviders struct {
	ID   UUID `json:"id"`
	Name Name `json:"name"`
}

type TestFormatObject struct {
	TestFormatField *TestFormat `json:"test_format_field,omitempty"`
}

type Users struct {
	ID String `json:"id"`
}

type QueryRoot struct {
	CloudProviders     *[]CloudProviders `json:"CloudProviders,omitempty"`
	CloudProvidersByPk *CloudProviders   `json:"CloudProviders_by_pk,omitempty"`
	Users              *[]Users          `json:"Users,omitempty"`
	UsersByPk          *Users            `json:"Users_by_pk,omitempty"`
}

type SubscriptionRoot struct {
	CloudProviders     *[]CloudProviders `json:"CloudProviders,omitempty"`
	CloudProvidersByPk *CloudProviders   `json:"CloudProviders_by_pk,omitempty"`
	Users              *[]Users          `json:"Users,omitempty"`
	UsersByPk          *Users            `json:"Users_by_pk,omitempty"`
}
